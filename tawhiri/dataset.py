# Copyright 2014 (C) Daniel Richman
#
# This file is part of Tawhiri.
#
# Tawhiri is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Tawhiri is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Tawhiri.  If not, see <http://www.gnu.org/licenses/>.

"""
Open a wind dataset from file by memory-mapping

Datasets downloaded from the NOAA are stored as large binary files that are
memmapped into the predictor process and thereby treated like a huge array.

:class:`Dataset` contains some utility methods to find/list datasets in a
directory, and can open (& create) dataset files.

Note: once opened, the dataset is mmaped as :attr:`Dataset.array`, which by
itself is not particularly useful.  :mod:`tawhiri.interpolate` casts it (via a
memory view) to a pointer in Cython.
"""

from collections import namedtuple
import mmap
import os
import os.path
import signal
import operator
from datetime import datetime
import logging
import yaml

logger = logging.getLogger("tawhiri.dataset")


# NB: the Sphinx autodoc output for the Dataset class has to be adjusted by
# hand. There is some duplication; see (& update) docs/code/tawhiri.rst.

class Dataset(object):
    """
    A wind dataset

    .. attribute:: array

        A :class:`mmap.mmap` object; the entire dataset mapped into memory.

    .. attribute:: ds_time

        The forecast time of this dataset (:class:`datetime.datetime`).

    """
    _axes_type = namedtuple("axes",
                ("hour", "pressure", "variable", "latitude", "longitude"))

    _listdir_type = namedtuple("dataset_in_row",
                ("ds_time", "suffix", "filename", "path"))

    #: The default location of wind data
    DEFAULT_DIRECTORY = '/srv/tawhiri-datasets'

    @classmethod
    def filename(cls, ds_time, directory=DEFAULT_DIRECTORY, suffix=''):
        """
        Returns the filename under which we expect to find a dataset

        ... for forecast time `ds_time`, in `directory` with an optional
        `suffix`

        :type directory: string
        :param directory: directory in which dataset resides/will reside
        :type ds_time: :class:`datetime.datetime`
        :param ds_time: forecast time
        :type suffix: string
        :rtype: string
        """

        ds_time_str = ds_time.strftime("%Y%m%d%H")
        return os.path.join(directory, ds_time_str + suffix)

    @classmethod
    def listdir(cls, directory=DEFAULT_DIRECTORY, only_suffices=None):
        """
        Scan for datasets in `directory`

        ... with filenames matching those generated by :meth:`filename`
        and (optionally) filter by only looking for certian suffices.

        :type directory: string
        :param directory: directory to search in
        :type only_suffices: set
        :param only_suffices: if not ``None``, only return results with a
                              suffix contained in this set
        :rtype: (named) tuples ``(dataset time, suffix, filename, full path)``
        """

        for filename in os.listdir(directory):
            if len(filename) < 10:
                continue

            ds_time_str = filename[:10]
            try:
                ds_time = datetime.strptime(ds_time_str, "%Y%m%d%H")
            except ValueError:
                pass
            else:
                suffix = filename[10:]
                if only_suffices and suffix not in only_suffices:
                    continue

                yield cls._listdir_type(ds_time, suffix, filename,
                                        os.path.join(directory, filename))

    cached_latest = None

    # prune_latest is registered as the signal handler for SIGALRM at the
    # bottom of the file.
    @classmethod
    def prune_latest(cls, signum, stack_frame):
        cls.cached_latest = None

    @classmethod
    def open_latest(cls, config, directory=DEFAULT_DIRECTORY, persistent=False):
        """
        Find the most recent datset in `directory`, and open it

        :type directory: string
        :param directory: directory to search
        :type persistent: bool
        :param persistent: should the latest dataset be cached, and re-used?
        :rtype: :class:`Dataset`
        """

        datasets = Dataset.listdir(directory, only_suffices=('', ))
        latest = sorted(datasets, reverse=True)[0].ds_time

        cached = cls.cached_latest
        valid = cached and \
                cached.ds_time == latest and \
                cached.directory == directory

        if valid:
            if persistent:
                # Refresh countdown
                signal.alarm(60)

            return cls.cached_latest
        else:
            ds = Dataset(config, latest, directory=directory)

            if persistent:
                # Start the countdown
                signal.alarm(60)
                # note, this creates a ref cycle.
                cls.cached_latest = ds

            return ds

    def load_config(self, config: str):
        """
        Parse the config file and set object properties
        """
        with open(config) as f:
            cfg = yaml.load(f, Loader=yaml.SafeLoader)

        hour_axis_vals = list(range(cfg['min_fcst_hr'], cfg['max_fcst_hr'] + cfg['fcst_step'], cfg['fcst_step']))
        pressure_axis_vals = sorted(cfg['pressure_levels'], reverse=True)
        variable_axis_vals = cfg['variables']
        lat_axis_vals = [
            cfg['min_lat'] + i * cfg['lat_res']
            for i in range(int((cfg['max_lat'] - cfg['min_lat']) / cfg['lat_res']) + 1)
        ]
        lon_axis_vals = [
            cfg['min_lon'] + i * cfg['lon_res']
            for i in range(int((cfg['max_lon'] - cfg['min_lon']) / cfg['lon_res']) + 1)
        ]
        # If the longitude range spans the entire globe, drop the last longitude value since it's the same as the
        # first longitude value
        if cfg['max_lon'] - cfg['min_lon'] == 360:
            lon_axis_vals = lon_axis_vals[:-1]

        self.shape = [
            len(hour_axis_vals),
            len(pressure_axis_vals),
            len(variable_axis_vals),
            len(lat_axis_vals),
            len(lon_axis_vals)
        ]

        self.axes = self._axes_type(
            hour_axis_vals,
            pressure_axis_vals,
            variable_axis_vals,
            lat_axis_vals,
            lon_axis_vals
        )

        #: The size in bytes of the entire dataset
        self.size = cfg['element_size']
        for _x in self.shape:
            self.size *= _x


    def __init__(self, config, ds_time, directory=DEFAULT_DIRECTORY, new=False):
        """
        Open the dataset file for `ds_time`, in `directory`

        :type config: string
        :param config: configuration file for the dataset
        :type directory: string
        :param directory: directory containing the dataset
        :type ds_time: :class:`datetime.datetime`
        :param ds_time: forecast time
        :type new: bool
        :param new: should a new (blank) dataset be created (overwriting
                    any file that happened to already be there), or should
                    an existing dataset be opened?
        """

        self.load_config(config)
        self.directory = directory
        self.ds_time = ds_time
        self.new = new

        self.fn = self.filename(self.ds_time, directory=self.directory)

        prot = mmap.PROT_READ
        flags = mmap.MAP_SHARED

        if new:
            mode = "w+b"
            prot |= mmap.PROT_WRITE
            msg = "truncate and write"
        else:
            mode = "rb"
            msg = "read"

        logger.info("Opening dataset %s %s (%s)", self.ds_time, self.fn, msg)

        with open(self.fn, mode) as f:
            if new:
                f.seek(self.size - 1)
                f.write(b"\0")
            else:
                f.seek(0, 2)
                sz = f.tell()
                if sz != self.size:
                    raise ValueError("Dataset should be {0} bytes (was {1})"
                                        .format(self.size, sz))
            f.seek(0, 0)

            self.array = mmap.mmap(f.fileno(), 0, prot=prot, flags=flags)

    def __del__(self):
        self.close()

    def close(self):
        """
        Close the dataset

        This deletes :attr:`array`, thereby releasing (a) reference to it.
        Note that other objects may very well hold a reference to the array,
        keeping it open.

        (The file descriptor is closed as soon as the dataset is mapped.)
        """

        if hasattr(self, 'array'):
            logger.info("Closing dataset %s %s", self.ds_time, self.fn)
            del self.array


signal.signal(signal.SIGALRM, Dataset.prune_latest)
